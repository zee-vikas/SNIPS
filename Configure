#!/bin/sh
#
# $Header$
#
# Configure script for snips
#
# Edit all the Makefile's and insert the proper values. It merges
#   Makefile.head */Makefile.mid and Makefile.tail > Makefile
# and substitutes the values of 
#	ROOTDIR = @ROOTDIR@
#	CFLAGS = @CFLAGS@  -DSNIPS
# in the resulting Makefile
#
##
#	-vikas@navya_.com, 2001

OPATH=$PATH
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/etc:/usr/etc
PATH=${PATH}:/usr/ucb:/usr/bsd:/usr/local/bin:/usr/local/gnu/bin:${OPATH}

package="snips"
PACKAGE=`echo $package | tr [a-z] [A-Z]`

PREVDEFS=Config.cache
SEDFILE=config.sed
OS="`uname -s -r`"

# If   'install -c -m 755 src dest'  fails on the system...
MYINSTALL="`pwd`/utility/myinstall"

# required variables
ROOTDIR="/usr/local/$package"
SRCDIR="`pwd`"
MANDIR="${ROOTDIR}/man"
MANEXT="n"
OPSMAIL="${package}-ops@`hostname`"
ADMINMAIL="${package}-admin@`hostname`"
MAIL="/usr/ucb/mail"		# also  /usr/bin/mail or /sbin/mail

CC="gcc"
CFLAGS="-O"         # can add -DDEBUG also
LIBS=""             # -L/usr/local/lib -lbind
YACC="yacc"

# Try and detect the following automatically based on the OS
OS_CFLAGS=""
OS_LIBS=""
RPCLIB=""

PSFLAGS='axw'           # flags for ps to see all processes (-ef on SysV)

RRDLIBDIR="/usr/local/rrdtool/lib"   # for librrd.a (RRD Tools)
PERL="/bin/perl"
AR="ar r"
RANLIB="ranlib"
INSTALL="install"
PING="multiping"         # need a ping that can be run as:  ping -c 3 host

# CURSESLIB can be curses or ncurses
CURSESLIB='-lcurses -ltermcap'

# Now list all the variables that we should store and substitute in
# the makefiles...
ALLVARS="package ROOTDIR SRCDIR MANDIR MANEXT OPSMAIL ADMINMAIL MAIL"
ALLVARS="${ALLVARS} CC CFLAGS YACC LIBS OS OS_CFLAGS OS_LIBS RPCLIB PSFLAGS"
ALLVARS="${ALLVARS} PERL AR WHOAMI RANLIB INSTALL PING CURSESLIB"
ALLVARS="${ALLVARS} RRDCFLAGS RRDLIBDIR RRDLIBS"

## end variables
##
#
if [ -f $PREVDEFS ]; then
  echo "You seem to have already run $0 before, would you like"
  echo "to take your previous answers as defaults [n]: " | tr -d '\012' 
  read input
  if [ "$input" = "Y" ] || [ "$input" = "y" ]
   then
     . ./$PREVDEFS
  fi
fi

cat <<!

SET INSTALLATION DIRECTORY
 It is advisable to put all the $PACKAGE files under one directory
 tree with further sub-directories like bin/ etc/ lib/ man/
 This will allow easy upgrades and replacements of this software
 without leaving old unsed files lying around.

 However, the DATA and LOG directories will have files which are constantly
 updated by the monitors, and you might want to keep them separately under
 a VAR directory (or alternately create soft links to these directories).
!

echo "Enter top level directory [${ROOTDIR}]: " | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  ROOTDIR=${input}; fi

MANDIR=${ROOTDIR}/man
echo "Enter location of man pages [${MANDIR}]: " | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  MANDIR=${input} ; fi

echo "Enter extension for man pages [${MANEXT}]: " | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  MANEXT=${input} ; fi

cat <<!

 $PACKAGE sends regular operational email messages when a device goes
 critical, etc. It is advised to create a "${package}-ops" email alias in
 your mail system.
 It also needs to send ADMIN messages (in case of wrong directory
 permissions, etc.) - preferably to a system administrator. An email 
 alias such as "${package}-admin" should be created.

!
if [ ! -f ${MAIL} ]; then  MAIL=/bin/mail ; fi
if [ ! -f ${MAIL} ]; then  MAIL=/usr/bin/mail ; fi
echo "Where is your MAIL program located? [${MAIL}] :" | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  MAIL="${input}" ; fi
if [ ! -f ${MAIL} ]; then echo "WARNING, ${MAIL} does not exist" ; fi

echo "Where should the operational email go? [${OPSMAIL}] :" | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  OPSMAIL="${input}" ; fi

echo "Where should the admin email go? [${ADMINMAIL}] :" | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  ADMINMAIL="${input}" ; fi


##
##
echo ""
echo "Which compiler would you like to use? [${CC}]: " | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  CC="${input}" ; fi

echo "What compiler options do you want (-DDEBUG)? [${CFLAGS}]: " | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  CFLAGS="${input}" ; fi

echo "What linker options do you want (-L/local/lib -lbind)? [${LIBS}]: " | tr -d '\012'
read input ; if [ "X$input" != "X" ]; then  LIBS="${input}" ; fi

(mkdir TemP; cd TemP; ${YACC}) 2>&1 | egrep -i 'not.*found' >/dev/null 2>&1
if [ $? = 0 ]; then 
    echo "${YACC} NOT FOUND"
    YACC="bison -y"
    echo "Enter an alternative to yacc [${YACC}]: " | tr -d '\012'
    read input ; if [ "X$input" != "X" ]; then  YACC="${input}" ; fi
fi
rm -rf TemP

if [ ! -f ${PERL} ]; then  PERL=/usr/bin/perl ; fi
if [ ! -f ${PERL} ]; then  PERL=/usr/local/bin/perl ; fi
if [ ! -f ${PERL} ]; then
    echo "Where is PERL located on your system? [$PERL]: "| tr -d '\012' 
    read input ; if [ "X$input" != "X" ]; then  PERL="${input}" ; fi
    if [ ! -f ${PERL} ]; then echo "WARNING, ${PERL} does not exist" ; fi
fi

## RRDtool support (http://www.caida.org). Must have the rrd library
#  and perl modules installed and available
echo ""
echo "                    RRDtool Graphing Support"
if [ -d $RRDLIBDIR ]; then RRDCFLAGS="-DRRDTOOL" ; fi
if [ "$RRDCFLAGS" = "" ]; then definput="n" ; else definput="y" ; fi
echo "Do you have RRDtool installed (www.caida.org)? [$definput]: " | tr -d '\012'
read input
if [ "X$input" = "X" ]; then input=$definput ; fi
if [ "$input" = "y" ] || [ "$input" = "Y" ]; then
  RRDCFLAGS="-DRRDTOOL"
  echo "Enter path to the RRD library [$RRDLIBDIR]: " | tr -d '\012'
  read input ; if [ "X$input" != "X" ]; then RRDLIBDIR="${input}"; fi

  if [ ! -f $RRDLIBDIR/librrd.a ]; then
	echo "WARNING, $RRDLIBDIR/librrd.a  not found"
  fi

  RRDLIBS="-L$RRDLIBDIR -lrrd"
else
  RRDCFLAGS=""		# reset
  RRDLIBS=""		# reset
fi

## Check if they want the old NOCOL mode
#echo ""
#echo "Do you want to compile using the old NOCOL event structure? [no]: " | tr -d '\012'
#read input ; if [ "X$input" != "X" ]; then  CFLAGS="${CFLAGS} -DNOCOL" ; fi


##
## Detect the operating system dependent parameters now
##
echo ""
echo "Detecting operating system dependencies for ${OS}..."

export PSFLAGS
(/bin/ps $PSFLAGS) 2>&1 | egrep -i '^usage' >/dev/null 2>&1
if [ $? = 0 ]; then PSFLAGS='-ef' ; fi

LIBRESOLV="-lresolv"
ls /usr/lib/libresolv* >/dev/null 2>&1
if [ $? = 1 ]; then
  ls /lib/libresolv* >/dev/null 2>&1
  if [ $? = 1 ]; then
  	ls /usr/lib/libbind* >/dev/null 2>&1
  	if [ $? = 1 ]; then LIBRESOLV="" ; else LIBRESOLV="-lbind" ; fi
  fi
fi

# mainly for Solaris systems. Should probably write a 'mywhoami' using 'id'
WHOAMI="/usr/ucb/whoami"
if [ ! -f ${WHOAMI} ]; then 
    WHOAMI="/usr/bin/whoami"
    if [ ! -f ${WHOAMI} ]; then WHOAMI="whoami" ; fi
fi

# These OS_CFLAGS and OS_LIBS are hardcoded in this script
#
case "$OS" in
  AIX|AIX\ *) 
	      OS_CFLAGS="-DAIX"
	      OS_LIBS="-lbsd"         # -l/lib/pse.exp ?
	      PING="/etc/ping"        # can do ping -c cnt host
              INSTALL=$MYINSTALL
	      ;; 
  AUX|A/UX\ 3*)
		OS_CFLAGS="-DAUX"
		OS_LIBS="-lposix"
		;; 
  BSDI|BSDI\ *|BSD386\ *|BSD/386\ *|FreeBSD\ 1*|BSD/OS\ 2*|BSD/OS\ 3*)
		OS_CFLAGS="-DBSDI"
		OS_LIBS="${LIBRESOLV}"    # -lcompat
		PING=`which ping`     # can do ping -c cnt host
		;; 
  BSD/OS\ 4*)
		OS_CFLAGS="-DBSDI4"
		OS_LIBS="${LIBRESOLV}"    # -lcompat
		PING=`which ping`     # can do ping -c cnt host
		;; 
  FREEBSD|FreeBSD\ 2*|FreeBSD\ 3*|NETBSD|NetBSD\ 1*)
		OS_CFLAGS="-DFREEBSD"
		OS_LIBS="${LIBRESOLV} -lcrypt" # some hosts -lresolv not needed
		PING=`which ping`     # can do ping -c cnt host
		;;
  FreeBSD\ 4*)
		OS_CFLAGS="-DFREEBSD4"
		OS_LIBS="${LIBRESOLV} -lcrypt" # some hosts -lresolv not needed
		PING=`which ping`     # can do ping -c cnt host
		;;
  OPENBSD|OpenBSD\ 2*)
		OS_CFLAGS="-DFREEBSD"
		OS_LIBS="${LIBRESOLV}"
		PING="/sbin/ping"
		;;
  HPUX|HP-UX\ *)
		OS_CFLAGS="-DHPUX"
		OS_LIBS=""
		RANLIB="touch"
		CURSESLIB='-lcurses'   # doesnt have -ltermcap
		;;                     #  irregular ping, so use multiping
  IRIX40|IRIX\ 4*)
		OS_CFLAGS="-DIRIX40 -cckr"
		OS_LIBS="-lsun"
		RANLIB=touch
		INSTALL=$MYINSTALL
		PING="/usr/etc/ping"  # can do ping -c cnt host
		;;
  IRIX51|IRIX\ 5*)
		OS_CFLAGS="-DIRIX51 -cckr"
		OS_LIBS=""
		RANLIB=touch
		PING="/usr/etc/ping"  # can do ping -c cnt host
		;;
  LINUX12|Linux\ 1*)
		OS_CFLAGS="-DLINUX1"
		OS_LIBS="-ldbm"
		CURSESLIB='-lncurses -ltermcap'
		PING="/bin/ping"
		;; 
  LINUX20|Linux\ 2*)
		OS_CFLAGS="-DLINUX2";
		OS_LIBS="${LIBRESOLV}"
		if [ -f /usr/lib/libgdbm.so ]; then
		  OS_LIBS="${OS_LIBS} -lgdbm"
		fi
		CURSESLIB='-lncurses' # no termcap
		PING="/bin/ping"     # can do ping -c cnt host
		;; 
  OSF1\ V4*)
		OS_CFLAGS="-DOSF1"
		OS_LIBS="-lm"        # for isnan
		INSTALL=bsdinst
		PING=/usr/sbin/ping  # can do ping -c cnt host
		;;
  OSF1|OSF1\ *|OSF\ 1*)
		OS_CFLAGS="-DOSF1"
		OS_LIBS=""
		INSTALL=bsdinst
		PING=/usr/sbin/ping  # can do ping -c cnt host
		;;
  RHAPSODY|Rhapsody\ 5*|MOSX)
		OS_CFLAGS="-DBSDI"
		OS_LIBS=""
		PING=`which ping`     # can do ping -c cnt host
		;; 
  SUNOS4|SunOS\ 4*)
		OS_CFLAGS="-DSUNOS4"
		OS_LIBS="${LIBRESOLV}"
		;;                  # use multiping
  SUNOS5|SunOS\ 5*)
		OS_CFLAGS="-DSUNOS5"
		OS_LIBS="-lsocket -lnsl ${LIBRESOLV}"
		AR="ld -r -o"
		RANLIB="touch"
		;;                  # use multiping
  SCO|SCO*)
		OS_CFLAGS="-DSVR4"
		OS_LIBS="-lnsl -lsocket -lcrypt"
		INSTALL=installbsd
		;; 
  SVR4|System\ V\ Release\ 4*)
		OS_CFLAGS="-DSVR4"
		OS_LIBS="-lnsl -lsocket"
		;; 
  SVR3|System\ V\ Release\ 3*)
		OS_CFLAGS="-DSVR3"
		OS_LIBS="-lnsl -lsocket -lcrypt"
		INSTALL=installbsd
		;; 
  ULTRIX\ *|Ultrix\ *|ultrix\ *)
		OS_CFLAGS="-DULTRIX"
		OS_LIBS=""
		;;                  # use multiping
  UNIXWARE|UNIXWARE\ *)
		OS_CFLAGS="-DSVR4"
		OS_LIBS="-lcrypt -lgen -lc -L/usr/ucblib -lucb -lsocket"
		;; 
  *)
     cat <<EoF
     OS=$OS is not a supported or detected operating system. Try setting
     the value of OS manually to the type of your system or set the
     OS_CFLAGS and OS_LIBS value manually in the Makefile if compile fails.

EoF
     ;; 
esac

##
echo "        OS_CFLAGS = ${OS_CFLAGS}"
echo "        OS_LIBS   = ${OS_LIBS}"
echo ""

# Check for the correct INSTALL...
>ChInstall
(${INSTALL} -c -m 750 ChInstall /tmp/) >/dev/null 2>&1
if [ ! -f /tmp/ChInstall ]; then INSTALL=${MYINSTALL} ; fi
rm -f ChInstall /tmp/ChInstall

##
## Save all entered parameters
##
echo "Saving all values in $PREVDEFS..."
rm -f $PREVDEFS
>$PREVDEFS
echo '# These answers are interdependent; do not edit this file!' >>$PREVDEFS
if test ! -w $PREVDEFS
then
  echo "Seems like the $PREVDEFS file is not writable"
else
  (
   for v in $ALLVARS
   do
     # even this horror botches metachars in var
     # set | grep "^${v}="
     eval "echo $v=\\\"\"\$$v\"\\\""
   done
  ) >>$PREVDEFS
fi

##
## Edit the Makefiles for all the variables in $ALLVARS
##
echo "Editing various Makefiles..."
rm -f $SEDFILE
>$SEDFILE
for v in $ALLVARS
 do
    # (eval "echo s%@$v@%\$$v%g") >> $SEDFILE   # @abc@ with $abc
    # the following replaces  'abc = @abc@'  with 'abc = $abc'
    # the [] has a space and a tab
   (eval "echo \"s%\\\\($v[ 	]*=[ 	]*\\\\)@$v@%\\\\1\$$v%g\"") >> $SEDFILE
 done

for m in Makefile.mid */Makefile.mid */*/Makefile.mid
 do
   M=`echo $m | sed 's/\.mid$//'`
   if [ -f $m ]; then
     if [ -f $M ]; then mv -f $M ${M}.bak ; fi
     cat Makefile.head $m Makefile.tail | sed -f $SEDFILE > $M
   fi
 done

rm -f $SEDFILE

##
cat <<Eof

Done editing Makefiles.

              Type   "make"  to start building  $PACKAGE

Eof
